# Bismi Chicken Shop Management System

## Project Overview
This project is a comprehensive web application developed for Bismi Chicken Shop to manage their business operations. It provides a complete solution for inventory management, order processing, customer relations, supplier management, financial transactions, and reporting.

## Technology Stack
- **Frontend**: React with TypeScript, using modern hooks and practices
- **UI Components**: Shadcn UI library with Tailwind CSS for styling
- **State Management**: React Query for API data fetching and caching
- **Backend**: Express.js server running on Node.js
- **Database**: Firebase Realtime Database for data persistence
- **Routing**: Wouter for client-side routing
- **Form Handling**: React Hook Form with Zod validation
- **Charts & Visualization**: Chart.js with React Chart.js 2 wrapper

## Architecture
The application follows a client-server architecture:
- **Client**: React Single Page Application that communicates with the backend API
- **Server**: Express.js API server that handles data storage operations
- **Shared**: Common types and schemas shared between client and server

## Key Features

### 1. Dashboard
- Overview of business metrics including total stock, today's sales, pending debts
- Low stock alerts to prevent inventory shortages
- Recent orders list with status
- Supplier debt tracking
- Sales charts for performance visualization

### 2. Inventory Management
- Add, edit, and remove inventory items
- Track quantity, rate, and category of each item
- Automatic inventory reduction when orders are created
- Low stock alerts when inventory falls below threshold

### 3. Supplier Management
- Create and manage supplier profiles
- Track pending debts to suppliers
- Record payments to suppliers
- View payment history and outstanding balances

### 4. Customer Management
- Maintain customer database with contact information
- Support for two customer types: Hotels (B2B) and Random (B2C) customers
- Track pending payments from customers
- Record customer payments

### 5. Order Processing
- Create new orders with multiple items
- Select customers from existing database or create new ones
- Calculate order totals automatically
- Track payment status (paid/pending)
- View detailed order history

### 6. Transaction Management
- Record all financial transactions (payments and receipts)
- Filter transactions by customer or supplier
- View transaction history with detailed information

### 7. Reports
- Generate sales reports for any date range
- View debt reports for both suppliers and customers
- Export reports to CSV format for external analysis

## Data Model

### Key Entities
1. **Suppliers**
   - Track supplier information and outstanding debts

2. **Inventory**
   - Manage stock items with quantities and rates

3. **Customers**
   - Store customer information with type (hotel/random) and pending amounts

4. **Orders**
   - Record sales with items, quantities, rates, and totals
   - Link to customers and update inventory

5. **Transactions**
   - Track all financial movements (payments/receipts)
   - Link to either suppliers or customers

## Implementation Details

### Frontend Organization
- **Pages**: Main route components for each section of the application
- **Components**: Reusable UI components organized by feature
- **Hooks**: Custom React hooks for shared functionality
- **Lib**: Utility functions and configuration

### Backend Structure
- **Routes**: API endpoints for data operations
- **Storage**: Data access layer for interacting with the database
- **Schema**: Shared type definitions and validation

## Development Approach
This application was built with a focus on:
1. **User Experience**: Clean, intuitive interface for business operations
2. **Data Integrity**: Consistent validation and error handling
3. **Performance**: Efficient data fetching and state management
4. **Scalability**: Modular architecture that can be extended
5. **Maintainability**: Clear separation of concerns and consistent coding patterns

## Deployment
The application is designed to be deployed on Vercel, with the following features:
- Combined development server that serves both backend API and frontend assets
- Production build optimization for faster performance
- Environment variable support for configuration
- Firebase Realtime Database integration for persistent data storage

### Firebase Configuration
The application uses Firebase Realtime Database for data persistence. The Firebase configuration is stored in:
- `client/src/lib/firebase.ts` - Client-side Firebase setup
- `server/firebase-storage.ts` - Server-side Firebase storage implementation

### Vercel Deployment
To deploy this application to Vercel:
1. Push the codebase to a GitHub repository
2. Connect the repository to Vercel
3. Configure the following environment variables on Vercel:
   - NODE_ENV=production
   - Add Firebase configuration as environment variables (optional for added security)
4. Deploy using the Vercel dashboard or CLI
5. The deployment is configured via `vercel.json` in the project root

## Future Enhancements
Potential areas for expansion include:
1. Authentication and user roles
2. Mobile application for on-the-go management
3. Advanced analytics and business intelligence
4. Barcode/QR code integration for inventory
5. SMS or email notifications for low stock and payment reminders
6. Integration with accounting software
7. Point of Sale (POS) functionality