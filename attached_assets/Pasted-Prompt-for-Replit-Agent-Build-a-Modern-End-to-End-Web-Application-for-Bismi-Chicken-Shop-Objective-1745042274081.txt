Prompt for Replit Agent: Build a Modern End-to-End Web Application for Bismi Chicken Shop

Objective: Create a comprehensive, modern web application for Bismi Chicken Shop to manage inventory, track orders, handle supplier debts, and manage hotel and customer transactions with a sleek, user-friendly UI. The application should use Firebase Realtime Database for data storage, Express.js for the backend, and React with Tailwind CSS for the frontend.



Application Requirements

1. Technology Stack





Frontend: React with JSX, Tailwind CSS for styling, hosted via CDN (use cdn.jsdelivr.net for React and dependencies).



Backend: Express.js to handle API routes and Firebase interactions.



Database: Firebase Realtime Database using the provided configuration.



Deployment: Ensure the app is deployable on Replit with a single HTML file for the frontend and a Node.js backend.

2. Firebase Configuration

Use the following Firebase Realtime Database configuration for all database operations:

// Import the functions you need from the SDKs you need
import { initializeApp } from "firebase/app";
import { getDatabase } from "firebase/database";

// Your web app's Firebase configuration
const firebaseConfig = {
  apiKey: "AIzaSyA3f4gJOKZDIjy9gnhSSpMVLs1UblGxo0s",
  authDomain: "bismi-broilers-3ca96.firebaseapp.com",
  databaseURL: "https://bismi-broilers-3ca96-default-rtdb.firebaseio.com",
  projectId: "bismi-broilers-3ca96",
  storageBucket: "bismi-broilers-3ca96.firebasestorage.app",
  messagingSenderId: "949430744092",
  appId: "1:949430744092:web:4ea5638a9d38ba3e76dbd9"
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);
const database = getDatabase(app);

3. Database Structure

Design the Firebase Realtime Database with the following structure:





Suppliers:





suppliers/{supplierId}: { name, debt, contact }



Inventory:





inventory/{itemId}: { type (e.g., chicken, eeral, leg piece, goat, kadai, beef), quantity (in kg), rate (per kg, varies daily) }



Orders:





orders/{orderId}: { customerId, items: [{ itemId, quantity, rate }], date, total, status (pending/paid), type (hotel/random) }



Customers:





customers/{customerId}: { name, type (hotel/random), contact, pendingAmount }



Transactions:





transactions/{transactionId}: { supplierId/customerId, amount, date, type (payment/receipt), description }

4. Features

The application must include the following features:

a. Supplier Management





Add, edit, and delete suppliers (e.g., P1, P2, P3).



Track debts to suppliers (e.g., P1: ₹70,000, P2: ₹80,000, P3: ₹0).



Record daily chicken/meat purchases from suppliers (e.g., 50 kg from P1 at ₹8,000).



Update supplier debt after payments (e.g., pay ₹10,000 to P1, reducing debt to ₹68,000).



View supplier transaction history.

b. Inventory Management





Add, update, and remove inventory items (chicken, eeral, leg piece, goat, kadai, beef, etc.).



Record daily incoming stock with quantities and market rates (e.g., 50 kg chicken at ₹160/kg).



Track current stock levels and alert when stock is low (e.g., < 5 kg).



Support adding new item types in the future.

c. Order Management





Create orders for hotels (e.g., Muniyandi Vilas: 5 kg chicken, 2 kg eeral, 10 kg leg piece) and random customers.



Allow variable quantities (grams or kilos) and rates based on daily market prices.



Generate daily bills for hotels with itemized details and totals.



Track order status (pending/paid) and pending amounts for hotels/customers.



Handle sudden/random orders from customers.

d. Customer Management





Add, edit, and delete customers (hotels like Muniyandi Vilas or random customers).



Track pending amounts for each customer (e.g., hotel owes ₹5,000 for last week's orders).



View order and payment history for each customer.



Support bulk payment updates (e.g., hotel clears ₹10,000 of pending amount).

e. Transaction Management





Record payments to suppliers and receipts from customers.



Generate transaction reports (daily, weekly, monthly) for cash flow analysis.



Track pending amounts for hotels/customers and debts to suppliers.

f. Dashboard





Display key metrics: total stock, pending supplier debts, pending customer payments, daily sales.



Show recent orders and transactions.



Provide quick access to add stock, create orders, and record payments.

g. Reporting





Generate daily/weekly/monthly sales reports.



Summarize supplier debts and customer pending amounts.



Export reports as CSV or PDF.

5. UI/UX Requirements





Build a modern, responsive UI using React and Tailwind CSS.



Use a clean, professional design with a sidebar for navigation (Dashboard, Suppliers, Inventory, Orders, Customers, Transactions, Reports).



Ensure mobile-friendliness for use on phones/tablets.



Use modals for adding/editing suppliers, inventory, orders, and transactions.



Implement real-time updates for stock, orders, and transactions using Firebase listeners.



Add search and filter options for orders, customers, and transactions.



Use charts (e.g., Chart.js) to visualize sales and stock trends on the dashboard.

6. Backend Requirements





Create an Express.js server with the following API endpoints:





GET /api/suppliers: List all suppliers.



POST /api/suppliers: Add a new supplier.



PUT /api/suppliers/:id: Update supplier details.



DELETE /api/suppliers/:id: Delete a supplier.



POST /api/suppliers/:id/payment: Record payment to supplier.



GET /api/inventory: List all inventory items.



POST /api/inventory: Add/update inventory stock.



GET /api/orders: List all orders (filter by date/customer).



POST /api/orders: Create a new order.



PUT /api/orders/:id: Update order status.



GET /api/customers: List all customers.



POST /api/customers: Add a new customer.



PUT /api/customers/:id: Update customer details.



POST /api/customers/:id/payment: Record customer payment.



GET /api/transactions: List all transactions (filter by date/type).



GET /api/reports: Generate sales/debt reports.



Use Firebase Realtime Database for all CRUD operations.



Implement basic authentication (username/password) for admin access.

7. Additional Notes





Avoid using <form> onSubmit due to sandbox restrictions; use button clicks with event handlers.



Use className instead of class for JSX attributes.



Ensure all Firebase operations are asynchronous and handle errors gracefully.



Include input validation (e.g., positive quantities, valid rates).



Add loading spinners for API calls and real-time updates.



Use UUIDs for all database keys (suppliers, orders, customers, transactions).



Ensure the app is secure by sanitizing inputs and using Firebase security rules (basic rules to allow read/write for authenticated users).

8. Project Structure

Organize the Replit project as follows:





index.html: Single-page React app with CDN imports for React, Tailwind, and Chart.js.



server.js: Express.js backend with API routes.



src/: React components and utilities.





components/: Reusable components (e.g., SupplierCard, OrderForm, DashboardChart).



pages/: Page components (e.g., Dashboard, Suppliers, Orders).



utils/: Firebase utilities and helper functions.



public/: Static assets (e.g., logo, icons).



.replit: Configuration for running the app (run node server.js and serve index.html).

9. Example Workflow





Morning: Add daily stock (e.g., 50 kg chicken from P1 at ₹160/kg, update debt to ₹78,000).



Daytime: Create orders for hotels (e.g., Muniyandi Vilas: 5 kg chicken at ₹180/kg) and random customers.



Evening: Generate bills for hotels, mark orders as pending/paid.



End of Day: Record payments to suppliers (e.g., ₹10,000 to P1, debt now ₹68,000) and from customers.



Weekly: Review reports for sales, debts, and pending amounts.

10. Deliverables





A fully functional web application deployed on Replit.



A single index.html file for the frontend with React and Tailwind CSS.



A server.js file for the Express.js backend with API routes.



Firebase Realtime Database configured and populated with sample data (3 suppliers, 10 customers, 5 orders, 10 transactions).



Documentation in a README.md file explaining setup, usage, and API endpoints.



Instructions for Replit Agent





Initialize a new Replit project with Node.js.



Set up Firebase Realtime Database using the provided configuration.



Create the Express.js backend with the specified API endpoints.



Build the React frontend with Tailwind CSS and Chart.js for visualizations.



Implement all features listed above, ensuring real-time updates and responsive design.



Test the application with sample data (e.g., 3 suppliers, 10 hotels, daily orders).



Deploy the app on Replit and provide a live URL.



Write a README.md with setup instructions and API documentation.

Focus on delivering a polished, user-friendly application that solves the pain points of tracking orders, debts, and payments for Bismi Chicken Shop.